import audioService from "./src/services/cloudinaryAudioService.js";

async function testRealTTS() {
  console.log("üé§ Testing REAL TTS Generation...");
  console.log("=================================");

  try {
    // Test with realistic content
    const testTexts = [
      "Hello! This is a test of our voice generation system. Can you hear me speaking clearly?",
      "Welcome to Voice AI Content Generator. We create amazing content for your business.",
      "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ø‡•ã ‡§π‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§Ü‡§µ‡§æ‡§ú ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä‡§ï‡•ã ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§π‡•ã‡•§", // Nepali text
    ];

    for (let i = 0; i < testTexts.length; i++) {
      const text = testTexts[i];
      const voice = i === 2 ? "ne_np_001" : "en_us_001"; // Use Nepali voice for Nepali text

      console.log(`\nüìù Test ${i + 1}: "${text.substring(0, 50)}..."`);
      console.log(`üéØ Voice: ${voice}`);
      console.log("üöÄ Generating audio...");

      const startTime = Date.now();

      try {
        const result = await audioService.generateAudio(text, {
          voice: voice,
          speed: 1.0,
          language: i === 2 ? "ne" : "en",
        });

        const duration = Date.now() - startTime;

        console.log("‚úÖ SUCCESS!");
        console.log(`üîó Audio URL: ${result.audioUrl}`);
        console.log(`‚è±Ô∏è Duration: ${result.duration} seconds`);
        console.log(`üìä Method: ${result.metadata.method}`);
        console.log(
          `üìè File size: ${result.metadata.fileSize || "Unknown"} bytes`
        );
        console.log(`‚ö° Generation time: ${duration}ms`);

        // Check if it's real TTS (not placeholder)
        if (
          result.metadata.method.includes("google") ||
          result.metadata.method.includes("web") ||
          result.metadata.method.includes("system")
        ) {
          console.log("üéâ REAL TTS WORKING! üéâ");
        } else {
          console.log("‚ö†Ô∏è  Using placeholder/fallback audio");
        }
      } catch (error) {
        console.error(`‚ùå Test ${i + 1} failed:`, error.message);
      }
    }

    console.log("\nüèÅ TTS Testing Complete!");
  } catch (error) {
    console.error("üí• Test setup failed:", error);
  }
}

// Run the test
testRealTTS()
  .then(() => {
    console.log("üéØ Test finished - check logs above for results");
    process.exit(0);
  })
  .catch((error) => {
    console.error("üí• Test crashed:", error);
    process.exit(1);
  });
